!!! 5
%html{lane: 'en'}
  %head
    %meta{charset: 'utf-8'}
    %title Huffington Post 2016 Primaries Linkout Image
    %style
      :plain
        body {
          margin: 2rem;
        }

        .race {
          display: inline-block;
        }

        .race>svg {
          width: 350px;
          height: 350px;
        }

        button.download-as-png {
          display: block;
          box-sizing: border-box;
          margin: 1rem 0;
          padding: 1rem;
          width: 100%;
        }

%body
  - for race in race_day.races
    - fill = { 'Dem' => '#1559d1', 'GOP' => '#b72727' }[race.party_id]
    .race{id: race.id, class: race.party_id}
      %svg{xmlns: 'http://www.w3.org/2000/svg', 'xmlns:xlink': 'http://www.w3.org/1999/xlink', viewBox: '0 0 700 700'}
        %style
          :plain
            g.counties, g.subcounties, g.cities { display: none; }

            path.state {
              stroke: #ccc;
              stroke-width: 2px;
              fill: #{fill};
            }

            path.mesh {
              fill: none;
              stroke: white;
              stroke-width: 2px;
            }

        %g.state{transform: 'translate(0 0)'}
          != race_map_svg(race).gsub(/(width|height)="\d+"/) { "#{$1}=\"700\"" }

        -# Translate to the center, minus half the width/height of the images
        -# Circle center: (175, 175)
        %g.headshots{transform: "translate(#{350 - 160*0.5} #{350 - 240*0.5})"}
          -# We'll draw the candidates' faces in a circle around the state.
          -#
          -# Remedial Polar Coordinates: https://en.wikipedia.org/wiki/Polar_coordinate_system
          -#
          -# In polar coordinates, a circle has constant r. Only one coordinate,
          -# ϕ, can vary. We'll space out all candidates equally along the
          -# spectrum 0 <= ϕ <= 2π.
          -#
          -# We draw in Cartesian coordinates, of course. Conversion:
          -# * x = r * cos(ϕ)
          -# * y = r * sin(ϕ)
          -#
          -# We don't care about clockwise/counterclockwise, negatives or
          -# positives. It'll be a circle no matter what.

          - step = 2 * Math::PI / race.candidate_races.length
          - phi = step / 10 # get it off-center
          - r = 240 # px radius

          - for candidate_race in race.candidate_races
            %image{x: (r * Math.cos(phi)), y: (r * Math.sin(phi)), width: 160, height: 240, 'xlink:href': inline_image_path("big-headshots/#{candidate_race.candidate_slug}.png")}
            - phi += step

      %button.download-as-png Download as .png

  %script
    :plain
      function onClickDownloadAsPng() {
        // https://svgopen.org/2010/papers/62-From_SVG_to_Canvas_and_Back/index.html
        var button = this;
        var svg = button.previousElementSibling;

        // 1. Write SVG to an img
        var svg_xml = (new XMLSerializer()).serializeToString(svg);
        var img = new Image();
        img.src = "data:image/svg+xml;base64," + btoa(svg_xml);

        // 2. Write img to a canvas
        img.onload = function() {
          var canvas = document.createElement('canvas');

          // The square image is 700x700. We'll also have a 4:3 view. Look
          // good with both by drawing in the middle of the bigger one.
          var width = Math.ceil(700 * 4 / 3);
          canvas.width = width;
          canvas.height = 700;
          var x = Math.floor((width - 700) / 2);

          var ctx = canvas.getContext('2d');
          ctx.fillStyle = 'white';
          ctx.fillRect(0, 0, width, 700);
          ctx.drawImage(img, x, 0);

          var pngDataUri = canvas.toDataURL('image/png');

          var a = document.createElement('a');
          a.href = pngDataUri;
          a.download = 'primaries-linkout-image.png';
          document.body.appendChild(a);
          a.click();
          a.remove();
        };
      }

      var buttons = document.querySelectorAll('button.download-as-png');
      for (var i = 0; i < buttons.length; i++) {
        var button = buttons[i];
        button.addEventListener('click', onClickDownloadAsPng, false);
      }
