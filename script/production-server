#!/usr/bin/env ruby
#
# This is meant to run as a daemon. It's basically cron with benefits.
#
# RUNNING
#
# The server creates `tmp/production-server.sock` and reads it, waiting for
# commands such as `exit\n` or `poll_dates 2016-02-01\n`. If no command comes
# before the timeout, it does its default polling.
#
# To run a command, run `script/run-production-command "exit"`. That opens
# `tmp/production-server.sock` for writing and opens
# `tmp/production-server-output.sock` for reading. The server will open
# `tmp/production-server-output.sock` for writing, so the server's output
# will be redirected to the `run-production-command` process, which will dump
# it on stderr.

require 'time'

require_relative '../lib/env'
require_relative '../lib/paths'
require_relative '../lib/uploader'
require_relative '../lib/api_sources'
require_relative '../app/models/database'
require_relative '../config/schedule'

require 'mkfifo'

FileUtils.mkdir_p(Paths.ProductionDir)

for path in [ Paths.ProductionCommands, Paths.ProductionOutput ]
  FileUtils.rm_f(path)
  File.mkfifo(path)
end

class Server
  include ServerSchedule

  def initialize
    @command_reader = open(Paths.ProductionCommands, 'r+')
    @output_writer = open(Paths.ProductionOutput, 'a+')
    @output_writer.sync = true
    @real_stderr = $stderr.dup
    @tick_number = -1
    @uploader = Uploader.new

    $logger.info('Loading views')
    @views = Dir[File.dirname(__FILE__) + '/../app/views/*.rb'].map do |path|
      if path =~ /base_view.rb$/
        nil
      else
        require File.absolute_path(path)
        basename = path.split('/').last.split('.').first
        class_name = basename.gsub(/(^|_)([^_]+)/) { $2.capitalize }
        Object.const_get(class_name)
      end
    end.compact
  end

  def run
    FileUtils.rm_rf("#{Paths.Dist}/2016")

    $logger.info('Building and uploading assets')
    Assets.build
    @uploader.upload_assets

    tick

    loop { wait_and_run_command_or_tick }
  end

  private

  def tick
    @tick_number += 1
    task = Ticks[@tick_number % Ticks.length]

    case task
    when ScheduleMethods::Tick::DelSuper
      update_del_super
    when ScheduleMethods::Tick::Pollster
      update_pollster
    when ScheduleMethods::Tick::ElectionDay
      update_election_days([ task.date_s ])
    when ScheduleMethods::Tick::Nil
      # do nothing
    else
      raise "Invalid tick command: #{task.inspect}"
    end
  end

  def update_del_super
    $logger.info('Updating del_super from AP')
    save_old_ap_cache
    ignoring_ap_quota_error do
      ApiSources.poll_del_super
      render_and_upload
    end
  end

  def update_election_days(date_strings)
    $logger.info("Updating races for #{date_strings} from AP")
    save_old_ap_cache
    ignoring_ap_quota_error do
      ApiSources.poll_dates(date_strings)
      render_and_upload
    end
  end

  def update_pollster
    $logger.info('Updating Pollster primaries estimates')
    ApiSources.poll_pollster_primaries
    render_and_upload
  end

  def render_and_upload
    $logger.info('Rendering')
    database = Database.load
    for view in @views
      view.generate_all(database)
    end

    $logger.info("Uploading changed content")
    @uploader.upload_content

    $logger.info("Finished uploading")
  end

  def save_old_ap_cache
    archive_path = "#{Paths.CacheArchive}/#{Time.now.utc.iso8601}.tar.gz".gsub(':', '-')

    $logger.info("Saving AP data to #{archive_path}")
    system(
      'tar',
      '-C', Paths.Cache,
      '-zcf', archive_path,
      "--exclude=pollster*",
      "--exclude=uglified-javascript",
      "--exclude=templates",
      "--exclude=*.etag",
      '.'
    )
  end

  def ignoring_ap_quota_error(&block)
    begin
      block.call
    rescue RuntimeError => e
      # [adam] AP uses a couple of messages for quota violations. I should have
      # logged them as we received them, so we could make a complete regex. I'll
      # start doing so now.
      #
      # 2016-02-27: HTTP 500 Internal Server Error from server. Body: {"fault":{"faultstring":"Rate limit quota violation. Quota limit exceeded. Identifier : uHK1N6gbkF0HdkZIHWNyXAzttwhqvOlA","detail":{"errorcode":"policies.ratelimit.QuotaViolation"}}}
      if e.message =~ /^HTTP [45]\d\d.*(Over quota limit|QuotaViolation)/
        $logger.info("AP's API reports a quota violation. Skipping this tick.")
      else
        raise e
      end
    end
  end

  # Waits up to TickIntervalInS seconds for an incoming command, then runs it.
  #
  # If no command arrives, runs the next tick from `config/schedule.rb`.
  def wait_and_run_command_or_tick
    if IO.select([ @command_reader ], nil, nil, TickIntervalInS)
      run_command
    else
      tick
    end
  end

  def run_command
    command = @command_reader.gets.strip
    $logger.info("Handling command: #{command}")

    $stderr.reopen(@output_writer)

    parts = command.split(/\s+/)

    case parts[0]
    when 'poll_dates' then update_election_days(parts[1..-1])
    when 'exit'
      $logger.info("Exiting")
      $stderr.write("\n") # so client can exit -- see below
      exit 0
    else
      $logger.warn("Ignoring invalid command `#{command}`")
    end

    # The client is running this command until output finishes. Write an empty
    # line to indicate the end of output.
    $stderr.write("\n")
    $stderr.reopen(@real_stderr)
  end
end

Server.new.run
