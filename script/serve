#!/usr/bin/env ruby

require 'date'

require_relative '../lib/env'
Bundler.require(:development)

require_relative '../lib/paths'
require_relative '../lib/logger'

$error_status = nil # if nil, HTTP response is 503; if non-zero, 500; if 0, 200/404.
$error_text = nil

def rebuild
  $error_status = nil
  $error_text = ''

  command = "#{Paths.Script}/build"
  IO.popen(command, err: [ :child, :out ]) { |io|
    io.each_line do |line|
      $stdout.write(line)
      $error_text << line
    end
  }

  $error_status = $?
end

listener = Listen.to('app', 'lib', 'assets', 'script', only: /(^copy)|(\.(csv|rb|js|json|png|css|sass|scss|haml|svg))$/) do |modified, added, removed|
  rebuild
end

rebuild
listener.start

class StatusReporter
  def initialize(app)
    @app = app
  end

  def call(env)
    if $error_status == nil
      # TODO instead of refreshing every 1s, use a callback somewhere to actually respond when the request is done
      [ 503, { 'Content-Type' => 'text/plain; charset=utf-8', 'Refresh' => '1' }, [ 'Regenerating...' ] ]
    elsif $error_status != 0
      [ 500, { 'Content-Type' => 'text/plain; charset=utf-8' }, [ "ERROR #{$error_status}. Output:\n\n#{$error_text}" ] ]
    else
      @app.call(env)
    end
  end
end

class Logger
  def initialize(app)
    @app = app
  end

  def call(env)
    response = @app.call(env)

    $logger.info("#{env['REQUEST_METHOD']} #{env['PATH_INFO']} => #{response[0]}")

    response
  end
end

app = Rack::Builder.new(quiet: true) do
  use(Logger)
  use(StatusReporter)
  use(Rack::Deflater)
  no_cache = { 'Cache-Control' => 'no-cache' }
  use(Rack::Static, urls: { '/2016' => '2016.html' }, root: Paths.Dist, header_rules: [[ :all, no_cache ]])
  use(Rack::TryStatic, root: Paths.Dist, urls: [ '/2016/primaries' ], try: [ '.html' ], header_rules: [[ :all, no_cache ]])
  use(Rack::Static,
      urls: [ '/2016' ],
      root: Paths.Dist,
      header_rules: [
        [ :all, { 'Cache-Control' => 'public, max-age=31536000', 'Expires' => (Time.now + 86400 * 365).utc.rfc2822 }],
        [ %w(css), { 'Content-Type' => 'text/css; charset=utf-8' } ],
        [ %w(js), { 'Content-Type' => 'application/javascript; charset=utf-8' } ],
        [ %w(json), { 'Content-Type' => 'application/json' } ]
      ]
  )

  run lambda { |env| [ 404, { 'Content-Type' => 'text/html; charset=utf-8' }, [ 'Not Found' ]] }
end

Rack::Server.start(app: app, Port: 3000, environment: 'none', AccessLog: []) # will return after Ctrl+C

listener.stop
